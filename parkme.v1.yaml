openapi: 3.0.0
info:
  title: ParkMe
  version: '1.0'
  contact:
    name: Martin Ashcroft
    email: martin.ashcroft1978@gmail.com
  description: Manage car park spaces
servers:
  - url: 'http://localhost:3000'
paths:
  '/spaces/{spaceId}':
    get:
      summary: Get Space
      tags: []
      operationId: get-space
      requestBody:
        content:
          application/json:
            schema:
              type: object
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Space'
              examples: {}
        '201':
          description: Created
      description: Get a car park space
    put:
      summary: Put Space
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Space'
      operationId: put-space
      description: Update a car park space
    parameters:
      - schema:
          type: number
        name: spaceId
        in: path
        required: true
  /spaces:
    post:
      summary: ''
      operationId: post-space
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Space'
      description: Create a car park space
      tags: []
    parameters: []
  '/users/{userId}':
    parameters:
      - schema:
          type: string
        name: userId
        in: path
        required: true
    get:
      summary: Your GET endpoint
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
      operationId: Get-user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
      description: Get User
  /users:
    get:
      summary: Your GET endpoint
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
      operationId: get-users
      description: |
        Get All Users
    post:
      summary: Create User
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      tags: []
      operationId: post-users
      description: Create User
  /spaces/available:
    get:
      summary: Your GET endpoint
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Space'
      operationId: get-spaces-available
      description: Get spaces that are available
  /spaces/claim:
    parameters: []
    put:
      summary: ''
      operationId: post-spaces-claim-spaceId
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Space'
      description: Claim an available space
      tags: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: number
                userId:
                  type: number
  /users/signup:
    post:
      summary: ''
      operationId: post-users-signup
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
              examples: {}
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: number
                  error:
                    type: string
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: number
                  error:
                    type: string
      description: User Sign Up
      tags: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                email:
                  type: string
                password:
                  type: string
                forename:
                  type: string
                surname:
                  type: string
                department:
                  type: string
            examples:
              example-1: {}
        description: ''
  /users/login:
    post:
      summary: ''
      operationId: Login
      responses:
        '200':
          description: OK
      description: User Login
      tags: []
components:
  schemas:
    Space:
      title: space
      x-tags:
        - car park space
      description: Car park space
      x-examples: {}
      type: object
      properties:
        id:
          type: integer
          format: int32
          minimum: 1
        number:
          type: integer
          format: int32
          minimum: 1
        status:
          type: string
          enum:
            - available
            - unavailable
            - on loan
        ownerId:
          type: integer
          format: int64
          minimum: 1
        onLoan:
          type: boolean
        loanee:
          type: number
    User:
      title: user
      type: object
      properties:
        id:
          type: string
          format: uuid
        forename:
          type: string
        surname:
          type: string
        department:
          type: string
        email:
          type: string
          format: email
        createdAt:
          type: string
          format: date-time
        isAdmin:
          type: boolean
tags: []
